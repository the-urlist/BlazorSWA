@using BlazorApp.Shared
@inject HttpClient Http
@inject StateContainer StateContainer

<form method="post" @formname="newlinkform" @onsubmit="OnSubmit" class="mb-6">
    <p>Enter a link and press enter</p>
    <input @ref="newLinkInput" id="newLink" @bind-value="linkurl" placeholder="http://example.com" class="input is-large is-size-2 modified">
    <div class="is-font-weight-medium mt-2 @((invalid ? "has-text-danger" : "is-hidden"))">That doesn't look like a valid URL</div>
</form>

@code {
    private string? linkurl;
    private bool invalid = false;
    private ElementReference newLinkInput;

    [Parameter]
    public EventCallback<Link> OnNewLinkAdded { get; set; }

    private async Task OnSubmit()
    {
        if (!ValidateUrl(linkurl))
        {
            invalid = true;
            StateHasChanged();
            return;
        }

        invalid = false;

        var link = new Link
            {
                Url = linkurl
            };

        await OnNewLinkAdded.InvokeAsync(link);
        linkurl = null;
        await newLinkInput.FocusAsync();
        await GetOpenGraphInfoForLink(link);
    }

    private bool ValidateUrl(string? url)
    {
        if (string.IsNullOrWhiteSpace(url))
        {
            return false;
        }

        if (!url.StartsWith("http://") && !url.StartsWith("https://"))
        {
            url = "http://" + url;
        }

        return Uri.TryCreate(url, UriKind.Absolute, out Uri? uriResult)
          && (uriResult.Scheme == Uri.UriSchemeHttp
          || uriResult.Scheme == Uri.UriSchemeHttps) && uriResult.Host.Replace("www.", "").Split('.').Count() > 1 && uriResult.HostNameType == UriHostNameType.Dns && uriResult.Host.Length > uriResult.Host.LastIndexOf(".") + 1;
    }

    private async Task GetOpenGraphInfoForLink(Link link)
    {
        try
        {
            StateContainer.AddLinkToUpdatePool(link);

            var cts = new CancellationTokenSource();
            cts.CancelAfter(TimeSpan.FromSeconds(20));

            var response = await Http.PostAsJsonAsync<Link>("api/oginfo", link, cts.Token);
            var updatedLink = await response.Content.ReadFromJsonAsync<Link>();

            if (updatedLink != null)
            {
                // call statecontainer updatelink
                StateContainer.UpdateLinkInBundle(link, updatedLink);
            }
        }
        catch (Exception e)
        {
            // log the error
            Console.WriteLine($"Unable to get OpenGraph info for {link}.\n{e.Message}");
    
            StateContainer.RemoveLinkFromUpdatePool(link);
        }
        finally
        {
            StateContainer.RemoveLinkFromUpdatePool(link);
        }
    }
}